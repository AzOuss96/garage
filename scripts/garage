#!/usr/bin/env python3
"""Script for resuming training from command line."""
# pylint: disable=no-name-in-module
import click
import torch

from garage.experiment import wrap_experiment, LocalRunner
import garage.torch.utils as tu


@click.group()
def cli():  # noqa: D103
    """The main command group."""


# pylint: disable=bad-docstring-quotes
@wrap_experiment
def resume_experiment(ctxt, from_dir=None, from_epoch=None, gpu=None):
    """Experiment definition of a resumed experiment."""
    # pylint: disable=missing-param-doc, missing-type-doc
    assert from_dir
    assert from_epoch
    if gpu is not None:
        tu.set_gpu_mode(True, gpu)
    runner = LocalRunner(ctxt)
    runner.restore(from_dir=from_dir, from_epoch=from_epoch)
    runner.resume()


@cli.command()
@click.argument('from_dir')
@click.option(
    '--log_dir',
    default=None,
    help='Log path for resumed experiment. If not specified, will be the same '
    'as from_dir.')
@click.option(
    '--snapshot_mode',
    default='last',
    help='Policy for which snapshots to keep (or make at all). Can be either '
    '"all" (all iterations will be saved), "last" (only the last iteration '
    'will be saved), "gap" (every snapshot_gap iterations are saved), or '
    '"none" (do not save snapshots).')
@click.option(
    '--gpu',
    default=None,
    help='GPU to use (or None, by default).')
@click.option(
    '--snapshot_gap',
    default=1,
    help='Gap between snapshot iterations. Waits this number of iterations '
    'before taking another snapshot.')
@click.option('--from_epoch',
              default='last',
              help='When there are multiple snapshots, '
              'specify the index of epoch to restore from. '
              'Can be "first", "last" or a number. '
              'Not applicable when snapshot_mode="last"')
def resume(from_dir, from_epoch, log_dir, snapshot_gap, snapshot_mode, gpu):
    # pylint: disable=missing-param-doc, missing-type-doc
    """Resume from experiment saved in FROM_DIR."""
    if log_dir is None:
        log_dir = from_dir
    resume_experiment(dict(log_dir=log_dir,
                           snapshot_mode=snapshot_mode,
                           snapshot_gap=snapshot_gap),
                      from_dir=from_dir,
                      from_epoch=from_epoch,
                      gpu=gpu)


if __name__ == '__main__':
    cli()
